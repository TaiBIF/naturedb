"""init

Revision ID: 9f91dabada3f
Revises: aa700508ce66
Create Date: 2023-01-06 02:47:47.287928

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '9f91dabada3f'
down_revision = 'aa700508ce66'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('record',
    sa.Column('created', sa.DateTime(), nullable=True),
    sa.Column('updated', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('collect_date', sa.DateTime(), nullable=True),
    sa.Column('collect_date_text', sa.String(length=500), nullable=True),
    sa.Column('collector_id', sa.Integer(), nullable=True),
    sa.Column('field_number', sa.String(length=500), nullable=True),
    sa.Column('companion_text', sa.String(length=500), nullable=True),
    sa.Column('companion_text_en', sa.String(length=500), nullable=True),
    sa.Column('verbatim_locality', sa.String(length=1000), nullable=True),
    sa.Column('locality_text', sa.String(length=1000), nullable=True),
    sa.Column('locality_text_en', sa.String(length=1000), nullable=True),
    sa.Column('altitude', sa.Integer(), nullable=True),
    sa.Column('altitude2', sa.Integer(), nullable=True),
    sa.Column('latitude_decimal', sa.Numeric(precision=9, scale=6), nullable=True),
    sa.Column('longitude_decimal', sa.Numeric(precision=9, scale=6), nullable=True),
    sa.Column('verbatim_latitude', sa.String(length=50), nullable=True),
    sa.Column('verbatim_longitude', sa.String(length=50), nullable=True),
    sa.Column('field_note', sa.Text(), nullable=True),
    sa.Column('field_note_en', sa.Text(), nullable=True),
    sa.Column('proxy_taxon_scientific_name', sa.Text(), nullable=True),
    sa.Column('proxy_taxon_common_name', sa.Text(), nullable=True),
    sa.Column('proxy_taxon_id', sa.Integer(), nullable=True),
    sa.Column('source_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('collection_id', sa.Integer(), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['collection_id'], ['collection.id'], ),
    sa.ForeignKeyConstraint(['collector_id'], ['person.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['proxy_taxon_id'], ['taxon.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_record_field_number'), 'record', ['field_number'], unique=False)
    op.create_table('record_assertion',
    sa.Column('value', sa.String(length=500), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('record_id', sa.Integer(), nullable=True),
    sa.Column('assertion_type_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['assertion_type_id'], ['assertion_type.id'], ),
    sa.ForeignKeyConstraint(['record_id'], ['record.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('record_named_area_map',
    sa.Column('record_id', sa.Integer(), nullable=False),
    sa.Column('named_area_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['named_area_id'], ['named_area.id'], ),
    sa.ForeignKeyConstraint(['record_id'], ['record.id'], ),
    sa.PrimaryKeyConstraint('record_id', 'named_area_id')
    )
    op.create_table('record_person',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('record_id', sa.Integer(), nullable=True),
    sa.Column('person_id', sa.Integer(), nullable=True),
    sa.Column('role', sa.String(length=50), nullable=True),
    sa.Column('sequence', sa.Integer(), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['person_id'], ['person.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['record_id'], ['record.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('entity_assertion')
    op.drop_table('entity_person')
    op.drop_table('entity_named_area_map')
    op.drop_index('ix_entity_field_number', table_name='entity')
    op.drop_table('entity')
    op.add_column('identification', sa.Column('record_id', sa.Integer(), nullable=True))
    op.drop_constraint('identification_entity_id_fkey', 'identification', type_='foreignkey')
    op.create_foreign_key(None, 'identification', 'record', ['record_id'], ['id'], ondelete='SET NULL')
    op.drop_column('identification', 'entity_id')
    op.add_column('other_field_number', sa.Column('record_id', sa.Integer(), nullable=True))
    op.drop_constraint('other_field_number_entity_id_fkey', 'other_field_number', type_='foreignkey')
    op.create_foreign_key(None, 'other_field_number', 'record', ['record_id'], ['id'], ondelete='SET NULL')
    op.drop_column('other_field_number', 'entity_id')
    op.add_column('unit', sa.Column('record_id', sa.Integer(), nullable=True))
    op.drop_constraint('unit_entity_id_fkey', 'unit', type_='foreignkey')
    op.create_foreign_key(None, 'unit', 'record', ['record_id'], ['id'], ondelete='SET NULL')
    op.drop_column('unit', 'entity_id')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('unit', sa.Column('entity_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'unit', type_='foreignkey')
    op.create_foreign_key('unit_entity_id_fkey', 'unit', 'entity', ['entity_id'], ['id'], ondelete='SET NULL')
    op.drop_column('unit', 'record_id')
    op.add_column('other_field_number', sa.Column('entity_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'other_field_number', type_='foreignkey')
    op.create_foreign_key('other_field_number_entity_id_fkey', 'other_field_number', 'entity', ['entity_id'], ['id'], ondelete='SET NULL')
    op.drop_column('other_field_number', 'record_id')
    op.add_column('identification', sa.Column('entity_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'identification', type_='foreignkey')
    op.create_foreign_key('identification_entity_id_fkey', 'identification', 'entity', ['entity_id'], ['id'], ondelete='SET NULL')
    op.drop_column('identification', 'record_id')
    op.create_table('entity',
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('entity_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('collect_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('collect_date_text', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('collector_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('field_number', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('companion_text', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('companion_text_en', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('verbatim_locality', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('locality_text', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('locality_text_en', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('altitude', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('altitude2', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('latitude_decimal', sa.NUMERIC(precision=9, scale=6), autoincrement=False, nullable=True),
    sa.Column('longitude_decimal', sa.NUMERIC(precision=9, scale=6), autoincrement=False, nullable=True),
    sa.Column('verbatim_latitude', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('verbatim_longitude', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('field_note', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('field_note_en', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('proxy_taxon_scientific_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('proxy_taxon_common_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('proxy_taxon_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('source_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('collection_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['collection_id'], ['collection.id'], name='entity_collection_id_fkey'),
    sa.ForeignKeyConstraint(['collector_id'], ['person.id'], name='entity_collector_id_fkey'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], name='entity_project_id_fkey'),
    sa.ForeignKeyConstraint(['proxy_taxon_id'], ['taxon.id'], name='entity_proxy_taxon_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='entity_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_entity_field_number', 'entity', ['field_number'], unique=False)
    op.create_table('entity_named_area_map',
    sa.Column('entity_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('named_area_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name='entity_named_area_map_entity_id_fkey'),
    sa.ForeignKeyConstraint(['named_area_id'], ['named_area.id'], name='entity_named_area_map_named_area_id_fkey'),
    sa.PrimaryKeyConstraint('entity_id', 'named_area_id', name='entity_named_area_map_pkey')
    )
    op.create_table('entity_person',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('entity_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('person_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('role', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('sequence', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name='entity_person_entity_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], name='entity_person_organization_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['person_id'], ['person.id'], name='entity_person_person_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='entity_person_pkey')
    )
    op.create_table('entity_assertion',
    sa.Column('value', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('entity_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('assertion_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['assertion_type_id'], ['assertion_type.id'], name='entity_assertion_assertion_type_id_fkey'),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name='entity_assertion_entity_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='entity_assertion_pkey')
    )
    op.drop_table('record_person')
    op.drop_table('record_named_area_map')
    op.drop_table('record_assertion')
    op.drop_index(op.f('ix_record_field_number'), table_name='record')
    op.drop_table('record')
    # ### end Alembic commands ###
